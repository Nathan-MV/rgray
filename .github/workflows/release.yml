name: Build

on:
  push:
    tags:
      - '*'
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

env:
  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]

    steps:
      - uses: actions/checkout@v4

      # Windows-specific setup (MSYS2)
      - name: Set up MSYS2 (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          update: true
          install: >-
            base-devel
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-ruby
            mingw-w64-ucrt-x86_64-raylib
            git

      # Linux-specific setup
      - name: Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build gcc g++ git ruby-full libasound2-dev libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxinerama-dev libwayland-dev libxkbcommon-dev

      # Caching CPM modules
      - uses: actions/cache@v4
        with:
          path: "**/cpm_modules"
          key: ${{ matrix.os }}-${{ github.workflow }}-cpm-modules-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake', '**/CMakePresets.json') }}

      # Configure CMake for Windows
      - name: Configure with CMake (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      # Configure CMake for Linux
      - name: Configure with CMake (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      # Build the project on Windows
      - name: Build Project (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: cmake --build build -j$(nproc) --config ${{ matrix.build_type }}

      # Build the project on Linux
      - name: Build Project (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: cmake --build build -j$(nproc) --config ${{ matrix.build_type }}

      # Upload build artifacts
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.os }}-artifact-${{ matrix.build_type }}"
          path: |
            ${{ github.workspace }}/build/out
