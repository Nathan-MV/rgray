name: Build

on:
  workflow_dispatch:
  push:
    tags: ['*']
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]

    steps:
      - uses: actions/checkout@v4

      - name: Install Windows Dependencies
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          update: true
          install: >-
            base-devel
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-ruby
            mingw-w64-ucrt-x86_64-raylib
            mingw-w64-ucrt-x86_64-ccache
            mingw-w64-ucrt-x86_64-clang-tools-extra
            mingw-w64-ucrt-x86_64-cppcheck
            git

      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake ccache cppcheck clang-tidy-15 ninja-build gcc g++ git ruby-full \
            libasound2-dev libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev \
            libglu1-mesa-dev libxcursor-dev libxinerama-dev libwayland-dev libxkbcommon-dev

      - name: Install MacOS Dependencies
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake ninja ruby raylib

      - name: Cache CPM Modules
        uses: actions/cache@v4
        with:
          path: "**/cpm_modules"
          key: ${{ matrix.os }}-${{ github.workflow }}-cpm-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake', '**/CMakePresets.json') }}

      - name: Build Project (Windows)
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          cmake --build build -j$(nproc) --config ${{ matrix.build_type }}

      - name: Build Project (Linux/MacOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        shell: bash
        run: |
          CORES=$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 1)
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          cmake --build build --config ${{ matrix.build_type }} -- -j $CORES

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.os }}-artifact-${{ matrix.build_type }}"
          path: ${{ github.workspace }}/build/out
